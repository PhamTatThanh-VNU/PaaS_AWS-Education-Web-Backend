name: CI/CD Pipeline - Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  # Repository names are now configured as GitHub Variables
  BACKEND_ECR_REPOSITORY: ${{ vars.BACKEND_ECR_REPOSITORY }}

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  security-events: write  # This is required for uploading SARIF results

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-CI-CD
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify ECR repositories exist
      run: |
        echo "Checking if ECR repositories exist..."
        aws ecr describe-repositories --repository-names ${{ env.BACKEND_ECR_REPOSITORY }} || { echo "Backend repository not found!"; exit 1; }
        echo "‚úÖ ECR repository exists and is accessible"

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:latest
          ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
        build-args: |
          PORT=${{ vars.BACKEND_PORT }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ vars.AWS_REGION }}
          AWS_BUCKET=${{ secrets.AWS_BUCKET }}
          COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
          CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Display Trivy scan results (fallback)
      if: always()
      run: |
        echo "üìä Trivy Security Scan Results:"
        if [ -f "trivy-results.sarif" ]; then
          echo "‚úÖ SARIF file generated successfully"
          # Show summary of findings
          cat trivy-results.sarif | jq -r '.runs[0].results | length' 2>/dev/null || echo "Unable to parse SARIF results"
        else
          echo "‚ùå No SARIF file found"
        fi

    - name: Output image information
      run: |
        echo "üê≥ Backend Image: ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}"
        echo "‚úÖ Images successfully pushed to ECR!"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-Deploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS (Backend)
      run: |
        echo "üöÄ Deploying Backend to ECS..."
        
        # Get current task definition
        echo "üìã Getting current backend task definition..."
        aws ecs describe-task-definition \
          --task-definition ${{ vars.ECS_BACKEND_TASK_DEFINITION_NAME }} \
          --query 'taskDefinition' --output json > task-def-backend.json
        
        # Update the image URI in task definition and clean up unnecessary fields
        echo "üîÑ Updating image URI for backend..."
        jq --arg IMAGE "${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          task-def-backend.json > new-task-def-backend.json

        # Validate JSON
        echo "üîç Validating generated backend JSON..."
        if ! jq empty new-task-def-backend.json; then
          echo "‚ùå Invalid JSON generated for backend:"
          cat new-task-def-backend.json
          exit 1
        fi
        echo "Generated backend JSON content:"
        cat new-task-def-backend.json

        # Register new task definition
        echo "üìù Registering new backend task definition..."
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def-backend.json \
          --query 'taskDefinition.taskDefinitionArn' --output text)
        
        echo "‚úÖ New backend task definition registered: $NEW_TASK_DEF_ARN"
        
        # Clean up temporary files
        rm -f task-def-backend.json new-task-def-backend.json
        
        # Update ECS service to use new task definition
        echo "üîÑ Updating ECS backend service..."
        aws ecs update-service \
          --cluster ${{ vars.ECS_CLUSTER_NAME }} \
          --service ${{ vars.ECS_BACKEND_SERVICE_NAME }} \
          --task-definition $NEW_TASK_DEF_ARN

    - name: Wait for deployment to complete
      run: |
        # Wait for backend service to stabilize
        aws ecs wait services-stable \
          --cluster ${{ vars.ECS_CLUSTER_NAME }} \
          --services ${{ vars.ECS_BACKEND_SERVICE_NAME }}

    - name: Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi 